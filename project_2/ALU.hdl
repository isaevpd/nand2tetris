// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    // zero and/or negate x
    Mux16(a=x, sel=zx, out=x-after-zx);
    Not16(in=x-after-zx, out=not-x-after-zx);
    Mux16(a=x-after-zx, b=not-x-after-zx, sel=nx, out=x-after-nx);
    // zero and/or negate y
    Mux16(a=y, sel=zy, out=y-after-zy);
    Not16(in=y-after-zy, out=not-y-after-zy);
    Mux16(a=y-after-zy, b=not-y-after-zy, sel=ny, out=y-after-ny);
    // compute x + y or x & y
    Add16(a=x-after-nx, b=y-after-ny, out=x-plus-y);
    And16(a=x-after-nx, b=y-after-ny, out=x-and-y);
    Mux16(a=x-and-y, b=x-plus-y, sel=f, out=output);
    // negate if no is 1
    Not16(in=output, out=not-output);
    // compute result that will be used for zr/ng
    Mux16(a=output, b=not-output, sel=no, out[0..7]=temp-first, out[8..14]=temp-second, out[15]=msb, out=out);
    // figure out zr
    Or8Way(in=temp-first, out=zr-first);
    Or8Way(in[0..6]=temp-second, in[7]=msb, out=zr-second);
    Or(a=zr-first, b=zr-second, out=first-or-second);
    Not(in=first-or-second, out=zr);
    // figure out ng
    Mux(a=false, b=true, sel=msb, out=ng);
}
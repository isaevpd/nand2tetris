// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static Array twoToThePower;
    static boolean currentColor;
    static int screenBase, screenEnd;

    /** Initializes the Screen. */
    function void init() {
        var int i, value;
        let twoToThePower = Array.new(16);

        let i = 0;
        let value = 1;
        while (i < 16) {
            let twoToThePower[i] = value;
            let value = value + value;
            let i = i + 1;
        }
        let currentColor = true;
        let screenBase = 16384;
        let screenEnd = 24575;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;

        let i = screenBase;
        while (i < (screenEnd + 1)) {
            do Memory.poke(i, 0);
            let i = i + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let currentColor = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, value, bit, bitMask;
        let address = (32 * y) + (x / 16);
        let value = Memory.peek(screenBase + address);
        let bit = x - ((x / 16) * 16);

        let bitMask = twoToThePower[bit];
        if (currentColor) {
            let value = value | bitMask;
        }
        else {
            let value = value & (~(bitMask));
        }
        do Memory.poke(screenBase + address, value);
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int x_direction, y_direction;
        var int diff, x_steps, y_steps, dx, dy;
        if (y1 = y2) {
            do Screen.drawHoritzontalLine(x1, x2, y1);
            return;
        }
        if (x1 = x2) {
            do Screen.drawVerticalLine(y1, y2, x1);
            return;
        }

        let diff = 0;
        let x_direction = 1;
        let y_direction = 1;
        let x_steps = 0;
        let y_steps = 0;
        let dx = Math.abs(x2 - x1);
        let dy = Math.abs(y2 - y1);

        if (x2 < x1) {
            let x_direction = -1;
        }
        if (y2 < y1) {
            let y_direction = -1;
        }

        while ((x_steps < (dx+1)) & (y_steps < (dy+1))) {
            do Screen.drawPixel(
                x1 + (x_steps * x_direction),
                y1 + (y_steps * y_direction)
            );
            if (diff < 0) {
                let x_steps = x_steps + 1;
                let diff = diff + dy;
            }
            else {
                let y_steps = y_steps + 1;
                let diff = diff - dx;
            }
        }
        // do Screen.drawBottomRightLine(x1, y1, x2, y2);
        return;
        // }
        // return;
    }

    function void drawHoritzontalLine(int x1, int x2, int y) {
        var int start, end;

        let start = x1;
        let end = x2;

        if (x1 > x2) {
            let start = x2;
            let end = x1;
        }
        while (start < (end+1)) {
            do Screen.drawPixel(start, y);
            let start = start + 1;
        }
        return;
    }

    function void drawVerticalLine(int y1, int y2, int x) {
        var int start, end;

        let start = y1;
        let end = y2;

        if (y1 > y2) {
            let start = y2;
            let end = y1;
        }
        while (start < (end+1)) {
            do Screen.drawPixel(x, start);
            let start = start + 1;
        }
        return;
    }

    function void drawBottomRightLine(int x1, int y1, int x2, int y2) {
        var int a, b, diff, dx, dy;
        
        let a = 0;
        let b = 0;
        let diff = 0;
        let dx = x2 - x1;
        let dy = y2 - y1;

        while ((a < (dx+1)) & (b < (dy+1))) {
            do Screen.drawPixel(x1+a, y1+b);
            if (diff < 0) {
                let a = a + 1;
                let diff = diff + dx;
            }
            else {
                let b = b + 1;
                let diff = diff - dy;
            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        while (~(y1 > y2)) {
            do Screen.drawHoritzontalLine(x1, x2, y1);
            let y1 = y1 + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int i, dy, temp, rSquared;

        let i = y - r;
        let rSquared = r * r;

        while (i < (r+y+1)) {
            let dy = y - i;
            let temp = Math.sqrt(rSquared - (dy * dy));
            do Screen.drawHoritzontalLine(
                x + temp,
                x - temp,
                y + dy
            );
            let i = i + 1;
        }
        return;
    }
}
